name: azure-oidc-sample # this doesn't show up in ui

on:
  workflow_call:
    inputs:
      runs-on:
        description: Platform to execute on
        type: string
        default: ubuntu-latest
      keyvault:
        description: name of the keyvault
        type: string
        default: josh-key-vault-test 

# # set this in caller workflow: 
# permissions:
#   id-token: write # this is needed for oidc
#   contents: read # this is needed to clone repo

jobs:
  login:
    runs-on: ${{ inputs.runs-on }}
    permissions:
      id-token: write # this is needed for oidc
      contents: read # this is needed to clone repo

    steps:
    - uses: actions/checkout@v4
    # logging in with OIDC
    - name: 'Az CLI login'
      uses: azure/login@v1
      with:
        client-id: d951ac80-75f2-446a-aca6-cd53a68611f0
        tenant-id: e9846558-c4f0-4312-a89e-ebebe80779a1
        subscription-id: 2e9bfb26-ca29-44f5-8920-72c1b0b37188
        
    - name: just show some sub stuff
      run: |
        az account show
        az account show | jq ".id"
        
    # - name: get all az keyvault secrets
    #   run: |
    #     for secret_name in $(az keyvault secret list --vault-name ${{ inputs.keyvault }} --query "[].{name:name}" --output tsv); do
    #       secret_value=$(az keyvault secret show --vault-name "${{ inputs.keyvault }}" --name $secret_name --query value -o tsv)
    #       echo "::add-mask::$secret_value"
    #       echo "$secret_name=$secret_value" >> $GITHUB_ENV
    #     done
        
    # - name: testing secrets
    #   run: |
    #     echo "echoing as secret: ${{ secrets.my-secret }}" # doesn't work
    #     echo "echoing as env: ${{ env.my-secret }}" # works

  print-oidc-token:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # this is needed for oidc
      contents: read # this is needed to clone repo
    steps:
         
    # print oidc token claims
    - name: print oidc token claims
      run: |
          IDTOKEN=$(curl -s -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL" -H "Accept: application/json; api-version=2.0" -H "Content-Type: application/json"  | jq -r '.value')
          jwtd() {
            if [[ -x $(command -v jq) ]]; then
                jq -R 'split(".") | .[1] | @base64d | fromjson' <<< "${1}" > jwt_claims.json
                cat jwt_claims.json
                echo ${{ env.ACTIONS_ID_TOKEN_REQUEST_URL}} 
            fi
          }
          jwtd $IDTOKEN
    - name: print runner context
      env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
      run: |
          echo "$RUNNER_CONTEXT"
    - name: print github context
      env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
      run: |
          echo "$GITHUB_CONTEXT"
    - name: print additional claims added to actions runtime environment
      run: |
          echo "ACTOR_ID: $GITHUB_ACTOR_ID"
          echo "REPOSITORY_ID: $GITHUB_REPOSITORY_ID"
          echo "REPOSITORY_OWNER_ID: $GITHUB_REPOSITORY_OWNER_ID"
          echo "WORKFLOW_REF: $GITHUB_WORKFLOW_REF"
          echo "WORKFLOW_SHA: $GITHUB_WORKFLOW_SHA"
